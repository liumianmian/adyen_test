define("chart/widgetFramework/core/DataFormatter",["jqueryExtended","underscore","chart/widgetFramework/core/constants/DataConstants","util/Functional","chart/widgetFramework/core/drivers/observableCode","chartutil/domUtils"],function(a,k,h,e,b,i){var l="color:cornflowerblue;font-size:1em";
var c=false;var f="color:#5bda61;font-size:1em";var g=false;var d=false;var j=function(m){var n={};b(n,"formatter");n.init=function(){k.bindAll(this,"onNotifiedNewData");
this.$el=m.getNode();this.id=this.$el.attr("id");this.formatter=null;this.timeline=null;var r=this.parameters=this.getParameters(m);
var q=r.formatterName;this.options=r.options;var s=r.datasetName;this.dataFetcherContainer=a("#"+s);if(window.console&&console.log&&d){console.log("### DataFormatter2::init:: getting dataFetcher promise----");
}this.dataFetcherContainer.widget().then(function(t){n.dataFetcher=t.instance;n.dataFetcher.registerObserver(n.onNotifiedNewData,false,n.id);
},function(){if(window.console&&console.warn){console.warn("DataFormatter:: Error finding fetcher '"+q+"'",arguments);}});
var p=r.timeline;var o=(p&&p.indexOf("#")===-1)?a("#"+p):a(p);if(o.length){if(window.console&&console.log&&d){console.log("### DataFormatter2::init:: getting timeline promise----");
}o.widget().then(function(t){var u=t.instance;u.renderPromise.done(function(){n.timeline=u.timeline;});},function(){if(window.console&&console.warn){console.warn("DataFormatter:: Error loading timelineObject",arguments);
}});}this.silentFormat=(r.options&&r.options.silentFormat)?r.options.silentFormat:false;this.FormatterRef=null;this.requireFormatter(q);
i.removeDataAtrributes(this.$el,["options"]);};n.requireFormatter=function(o){require(["chart/widgetFramework/"+o],function(p){n.FormatterRef=p;
n.resolvedRequire=true;n.checkReady("require");},function(p){if(window.console&&console.log){console.log("DataFormatter2:: Formatter require error: ",p);
}});};n.onNotifiedNewData=function(p,o){if(window.console&&console.log&&c){console.log("%c\n################",f);console.log("%c### START STAGE :: DataFormatter::"+this.id+":: onNotifiedNewData pId="+o+" pData.type= "+p.changeObject.type,f);
console.log("%c################",f);}this.data=p.changeObject.data;this.hasData=true;this.checkReady("data");};n.checkReady=function(o){if(this.resolvedRequire&&this.hasData){this.createFormatter();
}};n.createFormatter=function(){if(!e.existy(this.formatter)){if(window.console&&console.log&&c){console.log("%c\n################",f);
console.log("%c### START STAGE :: DataFormatter::"+this.id+" ::formatData:: CREATING NEW FORMATTER",f);console.log("%c################",f);
}this.formatter=new this.FormatterRef(this.data,this.options,this.timeline,this.id);this.$el.on(h.FORMATTER_INFORM_WIDGET,k.bind(this.onFormatterToWidgetEvent,this));
this.formatter.$el=this.$el;}else{if(window.console&&console.log&&c){console.log("%c\n################",f);console.log("%c### START STAGE :: DataFormatter::"+this.id+" ::formatData:: UPDATING EXISTING FORMATTER",f);
console.log("%c################",f);}this.formatter.setRawData(this.data);}this.formatData();};n.getInstance=function(){return this.formatter;
};n.formatData=function(){if(e.existy(this.data)){if(window.console&&console.log&&c){console.log("%c\n################",f);
console.log("%c### START STAGE :: DataFormatter::"+this.id+" ::formatData:: formatting data",f);console.log("%c### START STAGE :: DataFormatter::"+this.id+" ::formatData:: silentFormat="+this.silentFormat,f);
console.log("%c################",f);}var o=this.formatter.formatData();this.setProperty("changeObject",{type:h.DATA_FORMATTED,data:o,silentFormat:this.silentFormat});
if(this.timeline){var p=this.parameters.timeline;if(this.parameters.timeline.indexOf("#")===-1){p="#"+this.parameters.timeline;
}setTimeout(function(){a(p).find("#timelineLoader").css("display","none");},1000);}if(this.silentFormat){this.silentFormat=false;
}}else{if(window.console&&console.log&&g){console.log("\n################ ","\n### DataFormatter:: "+this.id+" ::formatData:: no data to format","\n################ ");
}}};n.onFormatterToWidgetEvent=function(p,o){this.setProperty("changeObject",o);};n.getSortDirection=function(){return this.formatter.reverseDirection;
};n.getFormatter=function(){return this.formatter;};n.setData=function(o){this.data=o;};n.getData=function(o){return this.data||{};
};n.getParameters=function(o){var r=o.getNode().data();var p;if(k.keys(r).length){p=r;if(e.notFalsy(p.options)){if(!k.isObject(p.options)){if(window.console&&console.log){console.error("### DataFormatter::getParameters:: options JSON has not parsed correctly, option=",p.options);
}}}}else{o.parameters.options=a.parseJSON(o.parameters.options);p=o.parameters;}var q={};if(k.keys(p).length){q.formatterName=p.formatter;
q.datasetName=p.dataset;q.options=p.options;q.timeline=p.timeline;}else{throw"The parameters are not well defined"+p;}return q;
};n.init();if(window.console&&console.log&&d){console.log("\n### DataFormatter2::constructor:: calling pWidgetApi.ready()");
}m.ready();return n;};return j;});